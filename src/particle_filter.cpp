/**
 * particle_filter.cpp
 *
 * Created on: Dec 12, 2016
 * Author: Tiffany Huang
 */
#include "particle_filter.h"
#include <math.h>
#include <algorithm>
#include <iostream>
#include <iterator>
#include <numeric>
#include <random>
#include <string>
#include <vector>
#include <cassert> 
#include "helper_functions.h"

using std::string;
using std::vector;

void ParticleFilter::init(double x, double y, double theta, double std[]) {
  /**
   * Set the number of particles. Initialize all particles to 
   *   first position (based on estimates of x, y, theta and their uncertainties
   *   from GPS) and all weights to 1. 
   * Add random Gaussian noise to each particle.
   * NOTE: Consult particle_filter.h for more information about this method 
   *   (and others in this file).
   */

  // parameter was chosen based on the several experiment results;
  // this value provides the best performance (better than higher and lower number of particles) and error
  num_particles = 250;

  // default weight value is 1
  weights = std::vector<double>(static_cast<unsigned long>(num_particles), 1.0);

  // create a normal (Gaussian) distributions for x, y, and theta
  std::default_random_engine gen;
  std::normal_distribution<double> dist_x(x, std[0]);
  std::normal_distribution<double> dist_y(y, std[1]);
  std::normal_distribution<double> dist_theta(theta, std[2]);

  // initialize particle; add a Gaussian noise to the initial GPS coordinates
  particles = std::vector<Particle>(static_cast<unsigned long>(num_particles));
  for (unsigned int i = 0; i < num_particles; i++) {
    particles[i].x = dist_x(gen);
    particles[i].y = dist_y(gen);
    particles[i].theta = dist_theta(gen);
    particles[i].weight = weights[i];
    particles[i].id = i; // make particle's identifier a particle's initial position in the particles array
  }

  // initialization step is finished
  is_initialized = true;
}

void ParticleFilter::prediction(double delta_t, double std_pos[], 
                                double velocity, double yaw_rate) {
//   // create a normal (Gaussian) distributions for x, y, and theta with mean 0, so that later we add
//   // values generated by there distributions to the predicted values
  std::default_random_engine gen;
  std::normal_distribution<double> dist_x(0.0, std_pos[0]);
  std::normal_distribution<double> dist_y(0.0, std_pos[1]);
  std::normal_distribution<double> dist_theta(0.0, std_pos[2]);


  for (unsigned int i=0; i < particles.size(); i++) {
    
    if (fabs(yaw_rate) < 0.00001) 
    {
      // update x, y when yaw rate essentially 0  
      particles[i].x += velocity * delta_t * cos(particles[i].theta) + dist_x(gen);
      particles[i].y += velocity * delta_t * sin(particles[i].theta) + dist_y(gen);
      particles[i].theta += dist_theta(gen);
    }
    else
    {
      // updating x, y and the yaw angle when the yaw rate is not equal to zero - plus random Normalized distribution 
      particles[i].x += (velocity / yaw_rate) * (sin(particles[i].theta + yaw_rate * delta_t) - 			sin(particles[i].theta)) + dist_x(gen);
      particles[i].y += (velocity / yaw_rate) * (cos(particles[i].theta) - cos(particles[i].theta + yaw_rate * delta_t)) + dist_y(gen);
      particles[i].theta += yaw_rate * delta_t + dist_theta(gen);
    }
  }
  
}

void ParticleFilter::dataAssociation(vector<LandmarkObs> predicted, 
                                     vector<LandmarkObs>& observations) {
  /**
   * Find the predicted measurement that is closest to each 
   *   observed measurement and assign the observed measurement to this 
   *   particular landmark.
   */

   // Method updates observations by reference, associating the closest
   // predicted landmark id with observation id
   
   // for each observation
   for (unsigned int i=0; i < observations.size(); i++) 
   {
      // initialize closest predicted landmark index and distance to current observation
      int closest_index = -1;
      double closest_dist = std::numeric_limits<double>::max();

      // current observation x, y measurement 
      double x = observations.at(i).x; 
      double y = observations.at(i).y;

      // for each predicted landmark
      for (unsigned int j=0; j < predicted.size(); j++) {
        // calculate distance from current predicted landmark to above observation
        double cur_dist = dist(x, y, predicted.at(j).x, predicted.at(j).y);
        if (cur_dist < closest_dist) 
        {
          // current landmark is closer to observation, update closest distance and index
          closest_dist = cur_dist; 
          closest_index = j;
        } 
      }
      // assign closes predicted landmark id to reference observations id at index i
      observations.at(i).id = predicted.at(closest_index).id; // landmark associated with observation
      // ensuring that we found a mapping
      assert(observations.at(i).id != -1);
    }
}

void ParticleFilter::updateWeights(double sensor_range, double std_landmark[], 
                                   const vector<LandmarkObs> &observations, 
                                   const Map &map_landmarks) {
  /**
   * Update the weights of each particle using a mult-variate Gaussian 
   *   distribution. You can read more about this distribution here: 
   *   https://en.wikipedia.org/wiki/Multivariate_normal_distribution
   * NOTE: The observations are given in the VEHICLE'S coordinate system. 
   *   Your particles are located according to the MAP'S coordinate system. 
   *   You will need to transform between the two systems. Keep in mind that
   *   this transformation requires both rotation AND translation (but no scaling).
   *   The following is a good resource for the theory:
   *   https://www.willamette.edu/~gorr/classes/GeneralGraphics/Transforms/transforms2d.htm
   *   and the following is a good resource for the actual equation to implement
   *   (look at equation 3.33) http://planning.cs.uiuc.edu/node99.html
   */ 

    // map landmarks
    vector<Map::single_landmark_s> landmarks = map_landmarks.landmark_list;
    
    for (unsigned int i=0; i < particles.size(); i++) {

      // for each particle, get its x,y,theta
      Particle particle;
      particle = particles.at(i);
      double x_part = particle.x;
      double y_part = particle.y;
      double theta_part = particle.theta;
      
      vector<int> associations;
      vector<double> sense_x;
      vector<double> sense_y;

      /**
       * @brief Look for landmarks within sensor range
       * 
       */


      vector<LandmarkObs> landmarks_in_range;
      for (unsigned int j=0; j < landmarks.size(); j++) {

        // for each landmark, get its x,y
        int id_land = landmarks.at(j).id_i;
        double x_land = (double) landmarks.at(j).x_f;
        double y_land = (double) landmarks.at(j).y_f;
        // check distance between particle position and landmark position  
        double distance = dist(x_part, y_part, x_land, y_land);
        // std::cout << "landmark distance " << distance << " and range " << sensor_range << std::endl;            
        if (distance <= sensor_range) {
          // the landmark position is within range so add it to predicted landmark
          LandmarkObs landmark;
          landmark.id = id_land;
          landmark.x = x_land;
          landmark.y = y_land;
          // add landmark to within sensor range to list 
          landmarks_in_range.push_back(landmark); 

        }
      
      }

    // ensure at least one landmark within sensor range
    if(landmarks_in_range.empty()) {
      particles.at(i).weight = 0;
      // std::cout << "no landmarks_in_range found skip rest"  << std::endl;      
      continue;
    }

      /**
       * @brief Transform observations to map coordinates.
       * 
       */

      vector<LandmarkObs> transformed_obs;

      for (unsigned int k=0; k < observations.size(); k++) {
        // std::cout << "observation number (k) " << k << std::endl;      
        // for each observation, get x,y 
        double x_obs = observations.at(k).x;
        double y_obs = observations.at(k).y;
        // transform observation to map coordinates
        double x_map = x_part + (cos(theta_part) * x_obs) - (sin(theta_part) * y_obs);
        double y_map = y_part + (sin(theta_part) * x_obs) + (cos(theta_part) * y_obs);
        
        LandmarkObs obs;
        obs.id = -1; // observation unassociated with landmark
        obs.x = x_map;
        obs.y = y_map;
        // add transformed observation into map coordinates to list
        transformed_obs.push_back(obs);

      }

      /**
       * @brief Associate a landmark to each transformed observation.
       * 
       */

      dataAssociation(landmarks_in_range, transformed_obs);

      /**
       * @brief Calculate weight of each particle.
       * 
       */

      particles.at(i).weight = 1.0; // re-initialize weight for particle so that newly calculated weight reflects probability of current observation to landmarks

      // standard deviation (error) of x,y landmark measurement
      double sig_x = std_landmark[0];
      double sig_y = std_landmark[1];      

      /**
       * @brief Update particle probability based on proximity of each observation to its associated landmark.
       * 
       */

      // for each observation (with associated landmark)
      for (unsigned int l=0; l < transformed_obs.size(); l++) 
      {

        // for each observation in map coord that has been associated with landmark, get x,y,id 
        double x_obs = transformed_obs[l].x;
        double y_obs = transformed_obs[l].y;  
        int id_obs =  transformed_obs[l].id;  // id of closest landmark 

        // associate observation to landmark
        associations.push_back(id_obs);
        sense_x.push_back(x_obs);
        sense_y.push_back(y_obs);

        // associated landmark object x,y
        double x_land = (double) map_landmarks.landmark_list[id_obs - 1].x_f;
        double y_land = (double) map_landmarks.landmark_list[id_obs - 1].y_f;


        // calculate the normalization term using x,y sigma
        double gauss_norm = 1 / (2 * M_PI * sig_x * sig_y);

        // calculate exponent term using landmark x,y and observation x,y
        double exponent = (pow(x_obs - x_land, 2) / (2 * pow(sig_x, 2)))
                    + (pow(y_obs - y_land, 2) / (2 * pow(sig_y, 2)));

        // calculate weight using normalization and exponent term
        double obs_prob = gauss_norm * exp(-exponent);
        // update particle weight
        particles.at(i).weight *= obs_prob;

      }

      SetAssociations(particles.at(i), associations, sense_x, sense_y);

      weights.at(i) = particles.at(i).weight;
    }


}

void ParticleFilter::resample() {
  /**
   * Resample particles with replacement with probability proportional 
   *   to their weight. 
   * NOTE: You may find std::discrete_distribution helpful here.
   *   http://en.cppreference.com/w/cpp/numeric/random/discrete_distribution
   */


  vector<Particle> resampled_particles;

  // find max weight value
  std::default_random_engine generator;
  
    
  double max_weight = *std::max_element(weights.begin(), weights.end());
  // std::cout << "weights size, max weight " << weights.size() << " " << max_weight << std::endl;
  
  // start resampling at random particle
  int index = rand() % weights.size();
  double beta = 0.0;

  for (unsigned int i=0; i < particles.size(); i++) {
    beta += static_cast <double> (rand()) / (static_cast <double> (RAND_MAX/max_weight));
  
    while (weights[index] < beta){
      beta = beta - weights[index];
      index = (index + 1) % weights.size();
    }

    resampled_particles.push_back(particles.at(index));
  }  
  // replace particles with resampled particles
  particles = resampled_particles;

}

void ParticleFilter::SetAssociations(Particle& particle, 
                                     const vector<int>& associations, 
                                     const vector<double>& sense_x, 
                                     const vector<double>& sense_y) {
  // particle: the particle to which assign each listed association, 
  //   and association's (x,y) world coordinates mapping
  // associations: The landmark id that goes along with each listed association
  // sense_x: the associations x mapping already converted to world coordinates
  // sense_y: the associations y mapping already converted to world coordinates
  particle.associations= associations;
  particle.sense_x = sense_x;
  particle.sense_y = sense_y;
}

string ParticleFilter::getAssociations(Particle best) {
  vector<int> v = best.associations;
  std::stringstream ss;
  copy(v.begin(), v.end(), std::ostream_iterator<int>(ss, " "));
  string s = ss.str();
  s = s.substr(0, s.length()-1);  // get rid of the trailing space
  return s;
}

string ParticleFilter::getSenseCoord(Particle best, string coord) {
  vector<double> v;

  if (coord == "X") {
    v = best.sense_x;
  } else {
    v = best.sense_y;
  }

  std::stringstream ss;
  copy(v.begin(), v.end(), std::ostream_iterator<float>(ss, " "));
  string s = ss.str();
  s = s.substr(0, s.length()-1);  // get rid of the trailing space
  return s;
}


